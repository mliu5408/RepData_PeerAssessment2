submit()
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
install.packages("swirl")
swirl()
swirl()
swirl()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install.packages("tidyr")
library(tidyr)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2,sex_class,count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
?parse_number("class5")
parse_number("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
, method='curl' )
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
, 'ACS.csv'
)
ACS <- read.csv('ACS.csv')
agricultureLogical <- ACS$ACR == 3 & ACS$AGS == 6
head(which(agricultureLogical), 3)
install.packages('jpeg')
library(jpeg)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg'
, 'jeff.jpg'
, mode='wb' )
picture <- jpeg::readJPEG('jeff.jpg'
, native=TRUE)
picture
quantile(picture, probs = c(0.3, 0.8) )
library("data.table")
?data.table
example(data.table)
browseVignettes("data.table")
?Vignettes
??Vignettes
library(dplyr)
FGDP <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv'
, skip=4
, nrows = 190
, select = c(1, 2, 4, 5)
, col.names=c("CountryCode", "Rank", "Economy", "Total")
)
FEDSTATS_Country <- data.table::fread('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv'
)
mergedDT <- merge(FGDP, FEDSTATS_Country, by = 'CountryCode')
nrow(mergedDT)
mergedDT[order(-Rank)][13,.(Economy)]
mrgdDT
mergdDT
mergedDT
library(dplyr)
groupedDF <- group_by(mergedDF, Income.Group)
groupedDT <- group_by(mergedDT, Income.Group)
groupedDT <- group_by(mergedDT, Income.Group)
mergedDT[`Income Group` == "High income: OECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
mergedDT[`Income Group` == "High income: nonOECD"
, lapply(.SD, mean)
, .SDcols = c("Rank")
, by = "Income Group"]
library('dplyr')
breaks <- quantile(mergedDT[, Rank], probs = seq(0, 1, 0.2), na.rm = TRUE)
breaks
mergedDT$quantileGDP <- cut(mergedDT[, Rank], breaks = breaks)
?cut
mergedDT
mergedDT$quantileGDP
mergedDT[`Income Group` == "Lower middle income", .N, by = c("Income Group", "quantileGDP")]
install.packages("lubridate")
library(lbbridate)
library(lubridate)
swirl()
swirl()
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
install.packages("lubridate")
swirl()
swirl()
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
swirl()
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
install.packages("swirl")
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
Sys.getlocale("LC_TIME")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
Sys.getlocale("LC_TIME")
source('C:/Users/mingfuliu/Desktop/Coursera/3 Getting and Cleaning Data/Week3/Swirl.R')
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd( "1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
nyc<-now"America/New_York")
nyc<-now("America/New_York")
nyc
depart<-nyc+2
depart<-nyc+days(2)
depart
depart<- update(depart+hours(17)+minutes(34))
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive<-depart + hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- ymd("June 17, 2008")
last_time <- mdy("June 17, 2008", tzone="Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long < interval(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
packages <- c("data.table", "quantmod")
sapply(packages, require, character.only = TRUE, quietly = TRUE)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
?getwd
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNames
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit
?strsplit
varNamesSplit[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm = TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
amzn <- getSymbols("AMZN", auto.assign = FALSE)
library(quantmod) amzn = getSymbols("AMZN",auto.assign=FALSE) sampleTimes = index(amzn)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
?getSymbols
?index
sampleTimes = index(amzn)
sampleTimes
timeDT <- data.table::data.table(timeCol = sampleTimes)
timeDT[(timeCol >= "2012-01-01") & (timeCol) < "2013-01-01", .N ]
timeDT[((timeCol >= "2012-01-01") & (timeCol < "2013-01-01")) & (weekdays(timeCol) == "Monday"), .N ]
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind, data=airquality )
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data" )
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
print(p)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
head(ve)
head(v1)
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local==TRUE)
pathtofile("plot1.R", TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local
TRUE
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", .)
pathtofile("plot1.R", ...)
pathtofile("plot1.R", TRUE)
play()
str pathtofile()
pathtofile()
pathtofile
nxt()
pathoffile("plot1.R")
pathoffile(pathtofile("plot1.R"), local=TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color  diamonds$cut)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot( price~carat | color*cut, data=diamonds,strip=FALSE, pch=20,xlab=myxlab,ylab=myylab,main="mymain")
xyplot( price~carat | color*cut, data=diamonds,strip=FALSE, pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot( price~carat | color*cut, data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(color(),10)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2
p2(2)
p2(10)
ShowMe(p1(20))
ShowMe(p1(20))
p1(20)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue","green"))
p3<-colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x,y,pch=19,col=rgb(c(0,.5,.5)))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,0.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(co0ls)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(hwy,data=mpg,color=drv)
qplot(y=hwy, data = mpg, color = drv)
str(myhigh)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
install.packages("ROracle")
library("ROracle")
library("DBI")
source('C:/_Downloads/R/06_R_to_Oracle_Connection_Script/Connect_R_to_Oracle_v1_3_1.r')
library("DBI")
library("ROracle")
install.packages("ROracle", type="source")
library("ROracle")
source('C:/_Downloads/R/06_R_to_Oracle_Connection_Script/Connect_R_to_Oracle_v1_3_2.r', echo=TRUE)
source('C:/_Downloads/R/06_R_to_Oracle_Connection_Script/Connect_R_to_Oracle_v1_3_2.r', echo=TRUE)
source('C:/_Downloads/R/06_R_to_Oracle_Connection_Script/Connect_R_to_Oracle_v1_3_2.r', echo=TRUE)
source('C:/_Downloads/R/06_R_to_Oracle_Connection_Script/Connect_R_to_Oracle_v1_3_2.r', echo=TRUE)
install.packages(c("ape", "arules", "chron", "coin", "curl", "data.table", "devtools", "digest", "foreach", "git2r", "glmnet", "gridExtra", "haven", "hms", "iterators", "joineR", "joineRML", "lazyeval", "lme4", "MASS", "Matrix", "matrixStats", "mclust", "mgcv", "mice", "multcomp", "openssl", "party", "partykit", "pcaPP", "pscl", "quanteda", "quantmod", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rlang", "robustbase", "rpart", "rstan", "slam", "sp", "StanHeaders", "stm", "stringi", "testthat", "tibble", "TTR", "withr", "xts", "yaml", "zoo"))
source('C:/_Downloads/R/06_R_to_Oracle_Connection_Script/Connect_R_to_Oracle_v1_3_2.r', echo=TRUE)
?cex
?plot
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
plot(x, y, col = "blue", pch = 19, cex = 1)
plot(x, y, col = "blue", pch = 19, cex = 3)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
colors()
colorRamp()
colorRamp(0.5)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc<-hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=0.4,col="blue")
abline(h=.4,col="red")
5
abline(h=.05,col="green")
abline(h=.08,col="green")
abline(h=.09,col="green")
abline(h=.05,col="green")
abline(h=.08,col="green")
info()
nxt()
12
abline(h=.05,col="green")
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(ve)
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust, mean)
tapply(y,newClust, mean)
points(newCx,newCy,col=cols1, pch=8,cex=2)
points(newCx,newCy,col=cols1, pch=8,cex=2,lwd=2)
ddist(x,y,newCx,newCy)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2, mean)
tapply(y,newClust2, mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points( kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
---
title: "Human and Economic Costs of Severe Weather Events"
output: html_document:
#    keep_md: yes
---
---
title: Human and Economic Costs of Severe Weather Events
output: html_document:
#    keep_md: yes
---
---
title: "Untitled"
output: html_document
---
---
title: "Untitled"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
setwd("C:/Users/mingfuliu/RepData_PeerAssessment2")
output:
html_document:
keep_md: yes
toc: yes
---
# Analysis of impact, both economic as victims, of different weather events in the USA based on the NOAA Storm Database
Date: 19-12-2014
## Reproducible Research: Peer Assessment 2
### 2. Synopsis
TThe NOAA (National Oceanic & Atmospheric Administration) Storm Database contains characteristics of Major weather events in the United States of America. This project will fetch that data, tidy it up and then aggregate the following - 1. Most harmful events to human health. 2. Events that have strongest damage to property and crop.
setwd("C:/Users/mingfuliu/RepData_PeerAssessment2")
setwd("C:/Users/mingfuliu/RepData_PeerAssessment2")
data <- read.csv("repdata-data-StormData.csv.bz2")
data <- read.csv("repdata-data-StormData.csv")
data <- read.csv("repdata_data_StormData")
data <- read.csv(repdata_data_StormData)
data <- read.csv("repdata_data_StormData.csv.bz2")
?cache
?cacheMethod
?knit
